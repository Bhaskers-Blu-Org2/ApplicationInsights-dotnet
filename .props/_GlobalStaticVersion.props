<?xml version="1.0" encoding="utf-8"?>
<Project InitialTargets="GetVersionTarget" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="Info_GlobalStaticVersionProps"  BeforeTargets="Build" Condition=" $(Internal_Logging) == 'true' ">
    <Message Text="Info: GlobalStaticVersion.props imported by $(MSBuildProjectName)." Importance="high"/>
  </Target>

  <PropertyGroup>
    <!-- 
      Semantic Version. See http://semver.org for full details. 
      Update for every public release. 
    -->
    <SemanticVersionMajor>2</SemanticVersionMajor>
    <SemanticVersionMinor>14</SemanticVersionMinor> <!-- If changing the Minor version, also update the Date value. -->
    <SemanticVersionPatch>0</SemanticVersionPatch>
    <PreReleaseMilestone>beta3</PreReleaseMilestone> <!--Valid values: beta1, beta2, EMPTY for stable -->
    <!-- 
      Date when Semantic Version was changed. 
      Update for every MINOR release.
      NOTE!!!!!! Do not update when updating PreReleaseMilestone update 
      as it will restart file versions so 2.4.0-beta1 may have higher 
      file version (like 2.4.0.2222) than 2.4.0-beta2 (like 2.4.0.1111)
    -->
    <SemanticVersionDate>2020-02-20</SemanticVersionDate>

    <!--
      Pre-release version is used to distinguish internally built NuGet packages.
      Pre-release version = Minutes since semantic version was set, divided by 5 (to make it fit in a UInt16 (max 65535 = ~7 months).
    -->
    <!--<BuildNumber>$([MSBuild]::Divide($([System.DateTime]::Now.Subtract($([System.DateTime]::Parse($(SemanticVersionDate)))).TotalMinutes), 5).ToString('F0'))</BuildNumber>-->

    <VersionPrefix>$(SemanticVersionMajor).$(SemanticVersionMinor).$(SemanticVersionPatch)</VersionPrefix>
    <VersionSuffix>$(PreReleaseMilestone)</VersionSuffix>
    <!--<AssemblyVersion>$(VersionPrefix).$(BuildNumber)</AssemblyVersion> 
    <FileVersion>$(AssemblyVersion)</FileVersion>-->

    <BuildNumber>xxx</BuildNumber>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <FileVersion>0.0.0.0</FileVersion>


    <ThisIsATestTask />
  </PropertyGroup>

  <PropertyGroup Condition="'$(PackageVersion)'==''">
    <PackageVersion>$(VersionPrefix)</PackageVersion>
    <PackageVersion Condition="'$(PreReleaseMilestone)' != ''">$(PackageVersion)-$(PreReleaseMilestone)</PackageVersion>
    <PackageVersion Condition="'$(StableRelease)' != 'True'">$(PackageVersion)-build$(BuildNumber)</PackageVersion>
  </PropertyGroup>

    <ItemGroup>
    <!-- 
      AssemblyVersion and AssemblyFileVersion attributes are generated automatically for every build.
      NuGet package version is derived from AssemblyFileVersion.
    -->
    <AssemblyAttributes Include="AssemblyVersion">
      <_Parameter1>$(AssemblyVersion)</_Parameter1>
    </AssemblyAttributes>
    <AssemblyAttributes Include="AssemblyFileVersion">
      <_Parameter1>$(FileVersion)</_Parameter1>
    </AssemblyAttributes>
  </ItemGroup>


  <Target Name="GetVersionTarget" BeforeTargets="Build">
    <Message Text="****TEST_BEFORE*** BuildNumber: '$(BuildNumber)'  AssemblyVersion: '$(AssemblyVersion)'  FileVersion: '$(FileVersion)'" Importance="High" />


    <GetObjDirectory Directory="$(IntermediateOutputPath)" >
      <Output ItemName="ObjDirectory" TaskParameter="Result" />
    </GetObjDirectory>

    <!--<Message Text="****TEST*** Dir:'$(IntermediateOutputPath)' ObjDir:'@(ObjDirectory)'" Importance="High" />-->

    <GetBuildNumber Directory="@(ObjDirectory)" SemanticDate="$(SemanticVersionDate)" >
      <Output TaskParameter="Result" PropertyName="BuildNumber" />
    </GetBuildNumber>

    <!--<Message Text="****TEST*** TaskBuildNumber: '@(TaskBuildNumber)'" Importance="High" />-->

    <CreateProperty Value="$(VersionPrefix).$(BuildNumber)">
      <Output TaskParameter="Value" PropertyName="AssemblyVersion" />
    </CreateProperty>
    <CreateProperty Value="$(AssemblyVersion)">
      <Output TaskParameter="Value" PropertyName="FileVersion" />
    </CreateProperty>
    
    <Message Text="****TEST_AFTER*** BuildNumber: '$(BuildNumber)'  AssemblyVersion: '$(AssemblyVersion)'  FileVersion: '$(FileVersion)'" Importance="High" />
  </Target>


    <UsingTask TaskName="GetObjDirectory" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
      <ParameterGroup>
        <Directory ParameterType="System.String" Required="true" />
        <Result ParameterType="System.String" Output="true" />
      </ParameterGroup>
      <Task>
        <Using Namespace="System" />
        <Using Namespace="System.Diagnostics" />
        <Using Namespace="System.IO" />
        <Code Type="Fragment" Language="cs">
          <![CDATA[
              //Log.LogMessage(MessageImportance.High, "****TEST InputDirectory '{0}'", Directory);
              DirectoryInfo directory = new DirectoryInfo(Directory);

              while (directory != null && !directory.Name.Equals("obj", StringComparison.OrdinalIgnoreCase))
              {
                  directory = directory.Parent;
              }
              
              //Log.LogMessage(MessageImportance.High, "****TEST final: '{0}'", directory?.FullName ?? "null");
              Result = directory?.FullName;
          ]]>
        </Code>
      </Task>
    </UsingTask>

    <UsingTask TaskName="GetBuildNumber" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
      <ParameterGroup>
        <Directory ParameterType="System.String" Required="true" />
        <SemanticDate ParameterType="System.String" Required="true" />
        <Result ParameterType="System.String" Output="true" />
      </ParameterGroup>
      <Task>
        <Using Namespace="System" />
        <Using Namespace="System.Diagnostics" />
        <Using Namespace="System.IO" />
        <Code Type="Fragment" Language="cs">
          <![CDATA[
            //Log.LogMessage(MessageImportance.High, "****INPUTS Directory: '{0}'" SemanticDate: '{1}', Directory, SemanticDate);
          
            string fileName = "buildVersion.v";
            string filePath = Path.Combine(Directory, fileName);

            if (File.Exists(filePath))
            {
                string temp = File.ReadAllText(filePath);
                Result = temp;
            }
            else
            {
                double minutes = DateTime.Now.Subtract(DateTime.Parse(SemanticDate)).TotalMinutes;
                UInt16 buildNumber = (UInt16)(minutes / 5);

                System.IO.File.WriteAllText(filePath, buildNumber.ToString());
                Result = buildNumber.ToString();
            }
            ]]>
        </Code>
      </Task>
    </UsingTask>

  <UsingTask TaskName="ThisIsATestTask" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <!--<Directory ParameterType="System.String" Required="true" />
      <SemanticDate ParameterType="System.String" Required="true" />
      <Result ParameterType="System.String" Output="true" />-->
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            Log.LogMessage(MessageImportance.High, "************************** THIS IS A TEST");
          
            ]]>
      </Code>
    </Task>
  </UsingTask>
  
</Project>
